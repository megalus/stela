[tool.pytest.ini_options]
addopts = "--pydocstyle"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.black]
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \venv
    | \.aws-sam
    | _build
    | buck-out
    | build
    | dist
    | node_modules
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.stela]
config_file_path = "./tests/fixtures"
default_environment = "test"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "stela/__init__.py:__version__",
]
branch = "main"
upload_to_pypi = true
upload_to_release = true
build_command = "python -m pip install -U build && python -m build"

[project]
name = "stela"
version = "8.0.7"
description = "Organize your project settings and secrets with ease"
authors = [
    {name = "Chris Maillefaud", email = "chrismaille@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["settings", "configuration", "parser", "dotenv", "environment"]
classifiers = [
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
    "Environment :: Plugins",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]
requires-python = ">=3.11, <4.0"
dependencies = [
    "loguru",
    "toml",
    "python-dotenv",
    "click",
    "tomlkit"
]


[project.optional-dependencies]
dev = [
    "black",
    "coverage",
    "mypy",
    "pytest",
    "pytest-black",
    "pytest-cov",
    "pytest-mock",
    "pytest-mypy",
    "pytest-pydocstyle",
    "pytest-xdist",
    "yamllint",
    "auto-changelog",
    "isort",
    "bandit",
    "pre-commit",
    "flake8",
    "twine",
    "pydantic-settings",
    "mkdocs-material",
    "pytest-asyncio",
]
# Frameworks for example directory
example = [
    "django",
    "flask",
    "fastapi",
    "starlite",
    "jupyterlab",
    "chalice",
    "uvicorn"
]


[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"


[project.scripts]
stela = "stela.cmd.stela_cmd:cli"